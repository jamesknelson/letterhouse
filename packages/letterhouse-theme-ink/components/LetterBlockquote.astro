---
import { getWork } from 'letterhouse'

import { format } from 'date-fns'

import AddressChip from './AddressChip.astro'
import Icon from './Icon.astro'

const { 'data-work-id': workId } = Astro.props

const reference = await getWork(workId)

const toMyself =
  reference.authors.length === 1 &&
  reference.to?.length === 1 &&
  reference.authors[0].address.id === 'myself' &&
  reference.to[0].id === 'myself'
const formattedDate =
  reference.dated && format(new Date(reference.dated), 'yyyy/LL/dd')
---

<div class="quote">
  <section>
    <header>
      {!toMyself && (
        <div class="pair">
          <h3>From</h3>
          <ul>
            {reference.authors.map(({ address }) => (
              <li>
                <AddressChip value={address} />
              </li>
            ))}
          </ul>
        </div>
      )}
      {reference.to && (
        <div class="pair">
          <h3>{toMyself && 'From and '}To</h3>
          <ul>
            {reference.to.map((address) => (
              <li>
                <AddressChip value={address} />
              </li>
            ))}
          </ul>
        </div>
      )}
      <div class="space"></div>
      {formattedDate && (
        <div class="date pair">
          <h3>Dated</h3>
          <time datetime={formattedDate} class="date">
            {formattedDate}
          </time>
        </div>
      )}
      {reference.platform && (
        <>
          <div class="divider" />
          <div class="via pair">
            <h3>Via</h3>
            <a class="icon" href={reference.url} target="_blank">
              <Icon name={reference.platform} />
            </a>
          </div>
        </>
      )}
    </header>
    <blockquote>
      <slot />
    </blockquote>
  </section>

  <style>
    .quote {
      position: relative;
    }

    section {
      border: 1px solid var(--color-surface-border);
      border-radius: 4px;
      max-width: 650px;
      margin: 2rem auto;
    }

    header {
      border-bottom: 1px solid var(--color-surface-border);
      padding: 0.5rem 1.5rem;
      display: flex;
      align-items: stretch;
      gap: 1rem;
    }

    blockquote {
      position: relative;
      color: rgba(var(--rgb-on-surface), var(--opacity-alt));
      padding: 0 1.5rem 0.5rem;
      margin: 0;
    }

    h3 {
      color: rgba(var(--rgb-on-surface), var(--opacity-peripheral));
      font-size: 0.8rem;
      text-transform: uppercase;
      line-height: 0.8rem;
      font-weight: 500;
      letter-spacing: 1px;
      flex-grow: 0;
      white-space: nowrap;
    }

    ul,
    time {
      display: flex;
      align-items: center;
      justify-content: center;
      list-style: none;
      padding: 0;
      margin: 0;
      flex-grow: 1;
    }

    .date {
      color: rgba(var(--rgb-on-surface), var(--opacity-peripheral));
    }
    .draft {
      color: rgba(var(--rgb-on-surface), var(--opacity-placeholder));

      &:hover {
        color: var(--color-secondary);
      }
    }

    .icon {
      display: flex;
      align-items: center;
      width: 20px;
      height: 100%;
    }

    .space {
      flex-grow: 1;
    }

    .divider {
      border-left: 1px solid var(--color-surface-border);
    }

    .pair {
      display: flex;
      flex-direction: column;

      & h3 {
        margin-bottom: 0.375rem;
      }

      &.date,
      &.via {
        align-items: flex-end;
      }
    }
  </style>
</div>
