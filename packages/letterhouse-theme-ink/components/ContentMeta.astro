---
import type { Address } from 'letterhouse'

import { format } from 'date-fns'
import { url } from 'letterhouse'

import AddressChip from './AddressChip.astro'

export interface Props {
  dated?: string
  from: Address[]
  cc?: Address[]
  to?: Address[]
}

const { dated, from, cc = [], to = [] } = Astro.props as Props

const date = dated && new Date(dated)
const toMyself =
  from.length === 1 &&
  to.length === 1 &&
  from[0].id === 'myself' &&
  to[0].id === 'myself'
const formattedDate = date && format(date, 'yyyy/LL/dd')
---

<div class="address-and-date">
  {!toMyself && (
    <div class="pair">
      <h3>From</h3>
      <ul>
        {from.map((address) => (
          <li>
            <AddressChip value={address} />
          </li>
        ))}
      </ul>
    </div>
  )}
  <div class="pair">
    <h3>To{toMyself && ' myself'}</h3>
    <ul>
      {to.map((address) => (
        <li>
          <AddressChip value={address} />
        </li>
      ))}
    </ul>
  </div>
  {!!cc.length && (
    <div class="pair">
      <h3>CC</h3>
      <ul>
        {cc.map((address) => (
          <li>
            <AddressChip value={address} />
          </li>
        ))}
      </ul>
    </div>
  )}
  <div class="space"></div>
  <div class="date pair">
    <h3>Dated</h3>
    {formattedDate ? (
      <time datetime={formattedDate} class="date">
        {formattedDate}
      </time>
    ) : (
      <a class="draft" href={url.draftIndex()}>
        draft
      </a>
    )}
  </div>
</div>

<style>
  h3 {
    color: rgba(var(--rgb-on-surface), var(--opacity-peripheral));
    font-size: 0.8rem;
    text-transform: uppercase;
    line-height: 0.8rem;
    font-weight: 500;
    letter-spacing: 1px;
    flex-grow: 0;
    white-space: nowrap;
  }

  ul,
  time {
    display: flex;
    align-items: center;
    justify-content: center;
    list-style: none;
    padding: 0;
    margin: 0;
    flex-grow: 1;
  }

  .address-and-date {
    display: flex;
    align-items: stretch;
    gap: 1rem;
  }

  .date {
    color: rgba(var(--rgb-on-surface), var(--opacity-peripheral));
  }
  .draft {
    color: rgba(var(--rgb-on-surface), var(--opacity-placeholder));

    &:hover {
      color: var(--color-secondary);
    }
  }

  .space {
    flex-grow: 1;
  }

  .pair {
    display: flex;
    flex-direction: column;

    & h3 {
      margin-bottom: 0.375rem;
    }

    &.date {
      align-items: flex-end;
    }
  }
</style>
