---
import type { Letter } from 'letterhouse'

import { format } from 'date-fns'
import { url } from 'letterhouse'

import AddressChip from './AddressChip.astro'
import Icon from './Icon.astro'

export interface Props {
  letter: Letter
}

const { letter } = Astro.props as Props

const date = letter.dated && new Date(letter.dated)
const toMyself =
  letter.authors.length === 1 &&
  letter.to.length === 1 &&
  letter.authors[0].address.id === 'myself' &&
  letter.to[0].id === 'myself'
const formattedDate = date && format(date, 'yyyy/LL/dd')
---

<header>
  <div class='address'>
    {!toMyself && letter.collection !== 'inbox' && (
      <div class="pair">
        <h3>From</h3>
        <ul>
          {letter.authors.map(({ address }) => (
            <li>
              <AddressChip value={address} />
            </li>
          ))}
        </ul>
      </div>
    )}
    {Boolean(letter.to.length) && (
      <div class="pair">
        <h3>To</h3>
        <ul>
          {letter.to.map((address) => (
            <li>
              <AddressChip value={address} relabelMyself={toMyself} />
            </li>
          ))}
        </ul>
      </div>
    )}
    {Boolean(letter.cc.length) && (
      <div class="pair">
        <h3>CC</h3>
        <ul>
          {letter.cc.map((address) => (
            <li>
              <AddressChip value={address} />
            </li>
          ))}
        </ul>
      </div>
    )}
  </div>
  {!!letter.re.length && (
    <div class="re">
      <h3>Re</h3>
      <ul>
        {letter.re.map(
          (re) =>
            re.type === 'work' && (
              <li>
                <a href={re.value.url || '#'}>
                  {re.value.platform && (
                    <Icon class="icon" name={re.value.platform} />
                  )}
                  {re.value.title}
                </a>
              </li>
            ),
        )}
      </ul>
    </div>
  )}
  <div class='date'>
    {letter.status === 'published' ? (
      formattedDate ? (
        <time datetime={formattedDate}>{formattedDate}</time>
      ) : null
    ) : (
      <a class={letter.status} href={url.draftIndex()}>
        {letter.status}
      </a>
    )}
  </div>
</header>

<style>
  header {
    position: relative;
  }

  h3 {
    color: rgba(var(--rgb-on-surface), var(--opacity-peripheral));
    font-size: 0.8rem;
    text-transform: uppercase;
    line-height: 0.8rem;
    font-weight: 500;
    letter-spacing: 1px;
    flex-grow: 0;
    white-space: nowrap;
  }

  ul {
    display: flex;
    align-items: center;
    justify-content: center;
    list-style: none;
    padding: 0;
    margin: 0;
    flex-grow: 1;
  }

  .address {
    display: flex;
    border-bottom: 1px solid var(--color-surface-line);
    padding: 0.75rem var(--dim-block-margin-horizontal) 0.75rem;
    @media (--max-medium) {
      flex-wrap: wrap;
      align-items: stretch;
      gap: 0.625rem;
    }
    @media (--large) {
      align-items: stretch;
      gap: 1rem;
    }
  }

  .re {
    display: flex;
    align-items: center;
    margin-top: 0.75rem;

    & h3 {
      flex-grow: 0;
      margin-right: 1rem;
    }

    & ul {
      justify-content: flex-start;
      flex-grow: 1;
    }

    & a {
      color: rgb(var(--rgb-primary), var(--opacity-alt));
      display: inline-flex;
      align-items: center;
      line-height: 1.5rem;
      padding-left: 0.25rem;
      border: currentColor solid 1px;

      & .icon {
        width: 16px;
        height: 16px;
        margin-right: 4px;
      }

      &:hover {
        color: var(--color-secondary);
      }

      border-top-color: transparent;
      border-right-color: transparent;
    }
  }

  .grow {
    flex-grow: 1;
  }

  .date {
    color: rgba(var(--rgb-on-surface), var(--opacity-peripheral));
  }
  .draft {
    color: rgba(var(--rgb-on-surface), var(--opacity-placeholder));

    &:hover {
      color: var(--color-secondary);
    }
  }
  .preview {
    color: rgba(var(--rgb-tertiary), var(--opacity-alt));
    font-style: bold;
    font-style: italic;

    &:hover {
      color: var(--color-tertiary);
    }
  }

  .pair {
    display: flex;
    flex-direction: column;

    @media (--max-medium) {
      & h3 {
        margin-bottom: 0.25rem;
      }
    }
    @media (--large) {
      & h3 {
        margin-bottom: 0.375rem;
      }
    }
  }

  .date {
    display: flex;
    flex-grow: 1;
    justify-content: flex-start;
    align-items: flex-start;
    padding: 0 var(--dim-block-margin-horizontal);

    & time,
    a {
      font-size: 0.8rem;
      text-transform: uppercase;
      line-height: 0.8rem;
      font-weight: 500;
      letter-spacing: 1px;
    }

    @media (--max-medium) {
      margin: 1.25rem 0 -0.25rem;
    }

    @media (--large) {
      position: absolute;
      top: 0.75rem;
      right: 0;
    }
  }
</style>
