---
import { format } from 'date-fns'

import { type Letter } from '@/model/letter'
import * as url from '@/url'

import AddressChip from './AddressChip.astro'

export interface Props {
  letter: Letter
}

const { letter } = Astro.props as Props

const date = letter.dated && new Date(letter.dated)
const toMyself =
  letter.from.length === 1 &&
  letter.to.length === 1 &&
  letter.from[0].id === 'myself' &&
  letter.to[0].id === 'myself'
const formattedDate = date && format(date, 'yyyy/LL/dd')
---

<header>
  <div class="address-and-date">
    {
      !toMyself && (
        <div class="pair">
          <h3>From</h3>
          <ul>
            {letter.from.map((address) => (
              <li>
                <AddressChip value={address} />
              </li>
            ))}
          </ul>
        </div>
      )
    }
    <div class="pair">
      <h3>To{toMyself && ' myself'}</h3>
      <ul>
        {
          letter.to.map((address) => (
            <li>
              <AddressChip value={address} />
            </li>
          ))
        }
      </ul>
    </div>
    <div class="space"></div>
    <div class="date pair">
      <h3>Dated</h3>
      {
        formattedDate ? (
          <time datetime={formattedDate} class="date">
            {formattedDate}
          </time>
        ) : (
          <a class="draft" href={url.draftIndex()}>
            draft
          </a>
        )
      }
    </div>
  </div>
  {
    formattedDate && formattedDate < '2022/08/24' && (
      <div class="re">
        <h3>Re</h3>
        <ul>
          <li>
            <a href="https://www.eurekalert.org/news-releases/654287">
              Bad Mileage: 98 tons of plants per gallon
            </a>
          </li>
        </ul>
      </div>
    )
  }
</header>

<style>
  header {
    border-bottom: 1px solid var(--color-surface-line);
    padding: 0.75rem var(--dim-block-margin-horizontal) 0.75rem;
  }

  h3 {
    color: rgba(var(--color-on-surface), var(--opacity-peripheral));
    font-size: 0.8rem;
    text-transform: uppercase;
    line-height: 0.8rem;
    font-weight: 500;
    letter-spacing: 1px;
    flex-grow: 0;
    white-space: nowrap;
  }

  ul,
  time {
    display: flex;
    align-items: center;
    justify-content: center;
    list-style: none;
    padding: 0;
    margin: 0;
    flex-grow: 1;
  }

  .address-and-date {
    display: flex;
    align-items: stretch;
    gap: 1rem;
  }

  .re {
    display: flex;
    align-items: center;
    margin-top: 0.75rem;

    & h3 {
      flex-grow: 0;
      margin-right: 1rem;
    }

    & ul {
      justify-content: flex-start;
      flex-grow: 1;
    }

    & a {
      color: rgb(var(--rgb-primary), var(--opacity-alt));
      display: inline-block;
      line-height: 1.5rem;
      padding-left: 0.25rem;
      border: currentColor solid 1px;

      &:hover {
        color: var(--color-secondary);
      }

      border-top-color: transparent;
      border-right-color: transparent;
    }
  }

  .grow {
    flex-grow: 1;
  }

  .date {
    color: rgba(var(--color-on-surface), var(--opacity-peripheral));
  }
  .draft {
    color: rgba(var(--color-on-surface), var(--opacity-placeholder));

    &:hover {
      color: var(--color-secondary);
    }
  }

  .space {
    flex-grow: 1;
  }

  .pair {
    display: flex;
    flex-direction: column;

    & h3 {
      margin-bottom: 0.375rem;
    }

    &.date {
      align-items: flex-end;
    }
  }
</style>
